openapi: '3.0.0'
info:
  description: 'Manage notes'
  version: '1.0.0'
  title: 'Note App'

paths:
  /users:
    post:
      summary: Create a user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        409:
          description: Duplicate request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409Response'

  /users/{user_id}/notes:
    post:
      summary: Create a note for a user
      operationId: createNote
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
      responses:
        201:
          description: Note successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'

    get:
      summary: Get all notes belonging to a user, listed by updated desc
      operationId: getNotes
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - name: is_archived
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          required: false
          schema:
            type: number
            default: 10
            minimum: 1
            maximum: 20
      responses:
        200:
          description: Get all notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'

  /users/{user_id}/notes/{note_id}:
    put:
      summary: Update note belonging to a user
      operationId: updateNote
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - name: note_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NoteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
      responses:
        200:
          description: Note successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        403:
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403Response'

    delete:
      summary: Delete a note belonging to a user
      operationId: deleteNote
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - name: note_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NoteId'
      responses:
        200:
          description: Note successfully deleted
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - deleted_resource
                properties:
                  message:
                    type: string
                    example: 'Successfully deleted'
                  deleted_resource:
                    $ref: '#/components/schemas/Note'
        403:
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403Response'

  /users/{user_id}/notes/{note_id}/archive:
    put:
      summary: Archive or unarchive a note belonging to a user
      operationId: manageNoteArchival
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - name: note_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NoteId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - should_archive
              properties:
                should_archive:
                  type: boolean
                  description: Move note to or from archive
      responses:
        200:
          description: Note successfully moved to or from archive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        403:
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403Response'

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
      properties:
        first_name:
          type: string
          description: First name of user
          example: 'Dobby'
        last_name:
          type: string
          description: Last name of user
          example: 'Free-Elf'
        email:
          type: string
          description: Email of user
          example: dobbyizfree@gmail.com

    CreateNoteRequest:
      type: object
      properties:
        title:
          type: string
          description: Title of note
          example: 'My First Note'
        content:
          type: string
          description: Contents of the note
          example: 'Hello World!'

    User:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        first_name:
          type: string
          description: First name of user
          example: 'Dobby'
        last_name:
          type: string
          description: Last name of user
          example: 'Free-Elf'
        email:
          type: string
          description: Email of user
          example: dobbyizfree@gmail.com
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'

    Note:
      type: object
      required:
        - id
        - user_id
        - title
        - content
        - is_archived
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/NoteId'
        user_id:
          $ref: '#/components/schemas/UserId'
        title:
          type: string
          description: Title of note
          example: 'My First Note'
        content:
          type: string
          description: Contents of the note
          example: 'Hello World!'
        is_archived:
          type: boolean
          default: false
          description: Indicator on whether note has been archived
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'

    UserId:
      type: string
      format: uuid
      description: Unique identifier of user
      example: 'fbfde0c1-a6a5-4a02-b925-d7f6c49dfe2f'

    NoteId:
      type: string
      format: uuid
      description: Unique identifier of note
      example: 'df3a04bd-5924-4538-85ee-841b1dca5329'

    CreatedAt:
      type: string
      format: date
      description: Created time of resource in ISO format UTC+0
      example: '2022-02-16T18:20:00.660Z'

    UpdatedAt:
      type: string
      format: date
      description: Updated time of resource in ISO format UTC+0
      example: '2022-02-16T18:21:00.660Z'

    Error400Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - API_VALIDATION_ERROR
            - INVALID_USER_ID
        message:
          type: string
          example: 'Some error message'

    Error403Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - REQUEST_FORBIDDEN_ERROR
        message:
          type: string
          example: 'Some error message'

    Error404Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - DATA_NOT_FOUND
        message:
          type: string
          example: 'Some error message'

    Error409Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - DUPLICATE_ERROR
        message:
          type: string
          example: 'Some error message'
